"use client";
import React, { useState } from "react";
import Link from "next/link";
import { useSearchParams, useRouter } from "next/navigation";

const insuranceTypes = [
  {
    id: 1,
    name: "‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û",
    icon: "‚ù§Ô∏è",
    coverage: "‡∏ø2,000",
    price: 10,
    description: "‡∏Ñ‡πà‡∏≤‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏±‡∏Å‡∏©‡∏≤‡πÉ‡∏ô‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•",
    benefits: ["‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô", "‡∏ô‡∏≠‡∏ô‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•", "‡∏Ñ‡πà‡∏≤‡∏¢‡∏≤", "‡∏ó‡∏±‡∏ô‡∏ï‡∏Å‡∏£‡∏£‡∏°"],
    color: "#a259f7",
  },
  {
    id: 2,
    name: "‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï",
    icon: "üõ°Ô∏è",
    coverage: "‡∏ø10,000",
    price: 10,
    description: "‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡∏£‡∏≠‡∏á‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡πÅ‡∏•‡∏∞‡∏≠‡∏∏‡∏ö‡∏±‡∏ï‡∏¥‡πÄ‡∏´‡∏ï‡∏∏",
    benefits: ["‡πÄ‡∏™‡∏µ‡∏¢‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï", "‡∏≠‡∏∏‡∏ö‡∏±‡∏ï‡∏¥‡πÄ‡∏´‡∏ï‡∏∏", "‡πÇ‡∏£‡∏Ñ‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á", "‡∏Ñ‡πà‡∏≤‡∏ó‡∏≥‡∏®‡∏û"],
    color: "#3b82f6",
  },
  {
    id: 3,
    name: "‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏™‡∏¥‡∏ô",
    icon: "üè†",
    coverage: "‡∏ø5,000",
    price: 10,
    description: "‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡∏£‡∏≠‡∏á‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏™‡∏¥‡∏ô",
    benefits: ["‡πÑ‡∏ü‡πÑ‡∏´‡∏°‡πâ", "‡∏Ç‡πÇ‡∏°‡∏¢", "‡∏†‡∏±‡∏¢‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥", "‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏•‡∏≤‡∏¢‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏™‡∏¥‡∏ô"],
    color: "#10b981",
  },
  {
    id: 4,
    name: "‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå",
    icon: "üöó",
    coverage: "‡∏ø15,000",
    price: 10,
    description: "‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡∏£‡∏≠‡∏á‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ß‡∏á‡∏à‡∏£",
    benefits: ["‡∏ä‡∏ô", "‡∏Ç‡πÇ‡∏°‡∏¢", "‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°", "‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô"],
    color: "#f59e0b",
  },
  {
    id: 5,
    name: "‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß",
    icon: "üë®‚Äçüë©‚Äçüëß‚Äçüë¶",
    coverage: "‡∏ø15,000",
    price: 10,
    description: "‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡∏£‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß",
    benefits: ["‡∏Ñ‡πà‡∏≤‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß", "‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ö‡∏∏‡∏ï‡∏£", "‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß", "‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô"],
    color: "#8b5cf6",
  },
];

export default function InsuranceSelectionPage() {
  const searchParams = useSearchParams();
  const router = useRouter();
  const selectedNumbers = searchParams.get("selectedNumbers")
    ? JSON.parse(searchParams.get("selectedNumbers") as string)
    : [];
  const [selectedInsurance, setSelectedInsurance] = useState<number[]>([]);
  const maxSelection = 1;

  const toggleInsuranceSelection = (insuranceId: number) => {
    if (selectedInsurance.includes(insuranceId)) {
      setSelectedInsurance([]);
    } else {
      setSelectedInsurance([insuranceId]);
    }
  };

  const getTotalPrice = () => {
    const lotteryCost = selectedNumbers.length * 80;
    const insuranceCost = selectedInsurance.length > 0 ? 10 : 0;
    return lotteryCost + insuranceCost;
  };

  const getTotalCoverage = () => {
    return selectedInsurance.reduce((total, id) => {
      const insurance = insuranceTypes.find((i) => i.id === id);
      if (!insurance || !insurance.coverage) return total;
      const match = insurance.coverage.replace(/[^\d]/g, "");
      const coverage = match ? parseInt(match, 10) : 0;
      return total + coverage;
    }, 0);
  };

  const handleProceedToPayment = () => {
    if (selectedInsurance.length === 0) {
      alert("Please select at least one insurance type to proceed.");
      return;
    }
    router.push(
      `/lottery/payment?selectedNumbers=${encodeURIComponent(
        JSON.stringify(selectedNumbers)
      )}&selectedInsurance=${encodeURIComponent(
        JSON.stringify(selectedInsurance)
      )}&totalPrice=${getTotalPrice()}&totalCoverage=${getTotalCoverage()}`
    );
  };

  return (
    <div className="min-h-screen bg-slate-50">
      <div className="bg-gradient-to-b from-[#1a1625] to-[#2d1b69] p-8 rounded-b-3xl">
        <div className="flex items-center justify-between mb-4">
          <Link href="/lottery" className="text-white text-2xl">‚Üê</Link>
          <h1 className="text-2xl font-bold text-white">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô</h1>
          <div className="w-8" />
        </div>
        <div className="text-slate-200 text-center mb-2">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡∏£‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏•‡∏≤‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</div>
        <div className="flex justify-center mb-2">
          <span className="text-white bg-white/20 rounded-full px-4 py-1 font-semibold">
            ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß {selectedInsurance.length}/{maxSelection}
          </span>
        </div>
      </div>

      <div className="p-6">
        {/* Selected Numbers Display */}
        <div className="mb-6">
          <div className="text-lg font-bold text-slate-800 mb-2">‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏™‡∏•‡∏≤‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</div>
          <div className="flex flex-wrap gap-2">
            {selectedNumbers.map((number: number, index: number) => (
              <div key={index} className="bg-purple-600 rounded-full w-10 h-10 flex items-center justify-center">
                <span className="text-white font-bold">{number}</span>
              </div>
            ))}
          </div>
        </div>

        {/* Insurance Types */}
        <div className="mb-6">
          <div className="text-lg font-bold text-slate-800 mb-2">‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô</div>
          <div className="flex flex-col gap-4">
            {insuranceTypes.map((insurance) => {
              const isSelected = selectedInsurance.includes(insurance.id);
              return (
                <button
                  key={insurance.id}
                  className={`flex flex-row items-start bg-white rounded-xl border-2 p-4 shadow-sm transition-all duration-150 text-left gap-4 ${isSelected ? "border-purple-500 bg-purple-50" : "border-transparent"}`}
                  onClick={() => toggleInsuranceSelection(insurance.id)}
                  type="button"
                >
                  <div className="flex flex-col items-center mt-1">
                    <div className={`w-6 h-6 rounded-full border-2 flex items-center justify-center ${isSelected ? "bg-purple-500 border-purple-500" : "border-slate-300"}`}>
                      {isSelected && <span className="text-white">‚úî</span>}
                    </div>
                  </div>
                  <div className="flex-1">
                    <div className="flex items-center gap-2 mb-1">
                      <span className="text-xl" style={{ color: insurance.color }}>{insurance.icon}</span>
                      <span className="font-bold text-slate-900">{insurance.name}</span>
                    </div>
                    <div className="text-slate-600 text-sm mb-1">{insurance.description}</div>
                    <div className="flex items-center gap-2 mb-1">
                      <span className="text-slate-600 text-sm">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡∏£‡∏≠‡∏á:</span>
                      <span className="font-bold text-green-600">{insurance.coverage}</span>
                    </div>
                    <div className="flex flex-wrap gap-2">
                      {insurance.benefits.slice(0, 3).map((benefit, idx) => (
                        <span key={idx} className="bg-purple-100 text-purple-700 rounded-full px-2 py-1 text-xs font-medium">
                          {benefit}
                        </span>
                      ))}
                      {insurance.benefits.length > 3 && (
                        <span className="text-purple-500 font-semibold text-xs">+{insurance.benefits.length - 3} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°</span>
                      )}
                    </div>
                  </div>
                </button>
              );
            })}
          </div>
        </div>

        {/* Summary Footer */}
        <div className="bg-white rounded-xl p-6 shadow-md">
          <div className="flex flex-col gap-2 mb-4">
            <div className="flex justify-between">
              <span className="text-slate-600 font-medium">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏•‡∏≤‡∏Å:</span>
              <span className="font-bold text-slate-900">{selectedNumbers.length} ‡πÉ‡∏ö</span>
            </div>
            <div className="flex justify-between">
              <span className="text-slate-600 font-medium">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô:</span>
              <span className="font-bold text-slate-900">
                {selectedInsurance.length > 0
                  ? insuranceTypes.find((i) => i.id === selectedInsurance[0])?.name || "-"
                  : "-"}
              </span>
            </div>
            <div className="flex justify-between">
              <span className="text-slate-600 font-medium">
                ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏° <span className="text-xs text-slate-400">(‡∏£‡∏ß‡∏°‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô + ‡∏Ñ‡πà‡∏≤‡∏ù‡∏≤‡∏Å‡∏™‡∏•‡∏≤‡∏Å)</span>
              </span>
              <span className="font-bold text-purple-700">‡∏ø{getTotalPrice()}</span>
            </div>
            <div className="flex justify-between">
              <span className="text-slate-600 font-medium">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡∏£‡∏≠‡∏á‡∏£‡∏ß‡∏°:</span>
              <span className="font-bold text-green-700">‡∏ø{getTotalCoverage().toLocaleString()}</span>
            </div>
          </div>
          <button
            className={`w-full bg-gradient-to-r from-purple-500 to-purple-700 text-white font-bold py-3 rounded-xl mt-2 transition-all ${selectedInsurance.length === 0 ? "opacity-50 cursor-not-allowed" : "hover:scale-105"}`}
            onClick={handleProceedToPayment}
            disabled={selectedInsurance.length === 0}
            type="button"
          >
            ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô ({selectedInsurance.length})
          </button>
        </div>
      </div>
    </div>
  );
} 